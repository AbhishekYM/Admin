import { reactive, ref } from "vue";
import { defineStore } from "pinia";
// import { useRouter } from "vue-router";
import Swal from "sweetalert2";
// import { useQuasar } from "quasar";

export const useGenerateTicket = defineStore("generateTicket", () => {
  // const $q = useQuasar();
  // const router = useRouter();
  // const errors = reactive({});
  const title = reactive({});
  const email_id = reactive({});
  const offers = ref([]);
  const no_of_visitor = reactive({});
  const total_rate = reactive({});
  const loading = ref(false);
  const no_of_children = reactive({});
  const category = ref([]);
  const ticket_master_id = ref([]);
  const loadingPayment = ref(false);
  const showErrorModal = ref(false);
  const errorMessage = ref('');
  const errors = ref({});
  //   SELECT * FROM forestdepartment.ticket_details where ticket_master_id=1;

  // foreach($row as $rows)

  // $rows->no_of_visitor
  // for($ff){
  // if(ticket_attributes_id!$r['ticket_attributes_id'])
  // ticketGen($rows)
  // }
  const ticket = ref([]);
  const place = ref([]);
  const user = ref([]);
  const form = reactive({
    slot: "",
    name: "",
    mode_of_payment: "",
    transaction_id: "",
    offer_id: "",
    discounted_amount: "",
    rounded_amount: "",
    total: "",
    email_id: "",
    total_rate: [],
    grand_total: "",
    total_in_words: "",
    title: "Forest Department",
    contact_no: [],
    created_by: [],
    description:
      "This ticket contains vital information about Forest Department activities.",
    no_of_visitor: [],
    ticket_master_id: "",
    // category: [],
    place_id: "",
    location: "Silvasa",
    comments:
      "Danudyog Industrial Estate, Silvassa, Dadra and Nagar Haveli and Daman and Diu 396 230",
    reporter_contact: "reporter@example.com",
    ticket_ids: [{}],
  });

  const data = [
    {label: "SRNO",field: "id",render: (item, index) => index + 1,sortable: true,name: "id",},
    // { label: "", field: "eye", name: "eye"},
    { label: "NAME", field: "name", sortable: true, name: "name" },
    { label: "Booking Id", field: "booking_id", sortable: true, name: "booking_id" },
    // { label: "Location", field: "place", sortable: true, name: "place" },
    // { label: "Category of Age",field: "ticket_master",sortable: true,name: "ticket_master",},
    // { label: "EMAIL ID", field: "email_id", sortable: true, name: "email_id" },
    {label: "CONTACT NO",field: "contact_no",sortable: true,name: "contact_no",},
    {label: "GRAND TOTAL",field: "grand_total",sortable: true,name: "grand_total",},
    // {label: "GENERATED BY ",field: "created_by",sortable: true,name: "created_by",},
    {label: "CREATED AT ",field: "created_at",sortable: true,name: "created_at",},
    { label: "VIEW TICKET", field: "action", name: "action" },
  ];
  function resetForm() {
    form.date_submitted = "";
    form.transaction_id = "";
    form.total_rate = [];
    form.email_id = "";
    form.submitted_by = "";
    form.name = "";
    form.mode_of_payment = "";
    form.place_id = "";
    form.created_by = "";
    form.contact_no = "";
    // form.ticket_master_id = "";
    form.due_date = "";
    form.no_of_adults = "";
    form.no_of_children = "";
    form.no_of_visitor = [];
    errors.value = {};
  }

  async function getCategorys() {
    // isLoading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("qrCodeGeneration/categories"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        ),
      ]);
      category.value = response.data.data;
    } catch (error) {
      console.error(error);
      // $q.notify({
      //   message: "Something went wrong. Please contact the admin.",
      //   multiLine: true,
      //   timeout: 0,
      //   classes: "validation-error-alert",
      //   position: "top",
      //   actions: [{ label: "Okay", color: "white", handler: () => {} }],
      // });
    } finally {
      // isLoading.value = false;
    }
  }

  async function getUsers() {
    loading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("user/me"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        ),
      ]);
      user.value = response.data.data;
    } catch (error) {
      console.error(error);
      // $q.notify({
      //   message: "Something went wrong. Please contact the admin.",multiLine: true,timeout: 0,
      //   classes: "validation-error-alert",position: "top",actions: [{ label: "Okay", color: "white", handler: () => {} }],
      // });
    } finally {
      loading.value = false;
    }
  }

  function getHours() {
    // return window.axios
    //   .get("ticket-master-summary")
    //   .then((response) => (ticketMaster.value = response.data));
  }
  async function getTicket() {
    // isLoading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("filterByCurrentDate"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 30000)
        ),
      ]);
      ticket.value = response.data.data;
    } catch (error) {
      console.error(error);
      // $q.notify({
      //   message: "Something went wrong. Please contact the admin.",multiLine: true,timeout: 0,
      //   classes: "validation-error-alert",position: "top",actions: [{ label: "Okay", color: "white", handler: () => {} }],
      // });
    } finally {
      // isLoading.value = false;
    }
  }
  async function getOffers() {
    // isLoading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("tickets/getOffersBasedOnLocation"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        ),
      ]);
      offers.value = response.data.data;
    } catch (error) {
      console.error(error);
      // $q.notify({
      //   message: "Something went wrong. Please contact the admin.",
      //   multiLine: true,
      //   timeout: 0,
      //   classes: "validation-error-alert",
      //   position: "top",
      //   actions: [{ label: "Okay", color: "white", handler: () => {} }],
      // });
    } finally {
      // isLoading.value = false;
    }
  }
  async function getPlace() {
    // isLoading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("location/place"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        ),
      ]);
      place.value = response.data.data;
    } catch (error) {
      console.error(error);
      // $q.notify({
      //   message: "Something went wrong. Please contact the admin.",
      //   multiLine: true,
      //   timeout: 0,
      //   classes: "validation-error-alert",
      //   position: "top",
      //   actions: [{ label: "Okay", color: "white", handler: () => {} }],
      // });
    } finally {
      // isLoading.value = false;
    }
  }

  async function getTicketMaster() {
    // isLoading.value = true;
    try {
      const response = await Promise.race([
        window.axios.get("date"),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        ),
      ]);
      ticket_master_id.value = response.data;
    } catch (error) {
      console.error(error);
    //  $q .notify({
    //     message: "Something went wrong. Please contact the admin.",
    //     multiLine: true,
    //     timeout: 0,
    //     classes: "validation-error-alert",
    //     position: "top",
    //     actions: [{ label: "Okay", color: "white", handler: () => {} }],
    //   });
    } finally {
      // isLoading.value = false;
    }
  }

  async function storeTicket() {
    if (loading.value) return;
    loading.value = true;
    errors.value = {};
    try {
      if (form.mode_of_payment === 'online') {
        if (!form.email_id) {
            // $q.notify({
            //     message: "Please enter your email address for online payment.",
            //     color: "warning",
            //     position: "top",
            //     actions: [{ label: "Okay", color: "black", handler: () => {} }],
            // });
            return;
        }
    }
      const ticketIdsData = [];

      for (const ticketId in form.no_of_visitor) {
        if (Object.hasOwn(form.no_of_visitor, ticketId)) {
          const ticketData = {
            ticket_attributes_id: parseInt(ticketId),
            title: form.title,
            location: form.location,
            description: form.description,
            comments: form.comments,
            reporter_contact: form.reporter_contact,
            no_of_visitor: form.no_of_visitor[ticketId],
            total_rate: form.total_rate[ticketId],
          };
          ticketIdsData.push(ticketData);
        }
      }
      
      const requestData = {
        place_id: form.place_id,
        ticket_ids: ticketIdsData,
        slot: form.slot,
        mode_of_payment: form.mode_of_payment,
        email_id: form.email_id,
        transaction_id: form.transaction_id,
        contact_no: form.contact_no,
        name: form.name,
        grand_total: form.grand_total,
        offer_id: form.offer_id,
        discounted_amount: form.discounted_amount,
        rounded_amount: form.rounded_amount,
        total: form.total,
        total_in_words: form.total_in_words,
      };
      const response = await window.axios.post("ticket", requestData);
      const ticketNo = response.data.data.token_no;
      const ticketId = response.data.data.id;
      if (form.mode_of_payment === 'online') {
        loadingPayment.value = true;
        const paymentStatusResponse = await checkPaymentStatus(ticketNo);
        openTicketDetailsWindow(ticketNo, paymentStatusResponse);
        await sendEmailOnline(ticketNo);
        const intervalId = setInterval(async () => {
          const paymentStatusResponse = await checkPaymentStatus(ticketNo);
          if (paymentStatusResponse.payment_status === true) {
              clearInterval(intervalId);
              await generateTicketPDF(ticketId);
              loadingPayment.value = false;
              resetForm();
          }
      }, 5000);
      }
      if (form.mode_of_payment === 'QR') {
        // await generateTicketPDF(ticketId);
        await generateTicketPDFPrint(ticketId);

      }else{
        await generateTicketPDFPrint(ticketId);
      }
      Swal.fire({
        title: "Creating Ticket",
        html: '<i class="mdi mdi-spin mdi-loading"></i><br/>Please wait...',
        text: "Please wait...",
        showConfirmButton: false,
        onBeforeOpen: () => {
          Swal.showLoading();
        },
      });
      getTicket();
      resetForm();
      Swal.close();
    } catch (error) {
      if (error.response.data.errors) {
        showError( error.response.data.errors);
      } 
    } finally {
      loading.value = false;
    }
  }
  function showError(errorDetails) {
    // Convert the errors object into a more manageable format for displaying
    const formattedErrors = Object.values(errorDetails).flat();
    errorMessage.value = "";
    errors.value = formattedErrors;
    showErrorModal.value = true;
  }
  
  async function generateTicketPDF(ticketId) {
    // if (form.mode_of_payment === 'QR') {
      try {
        const pdfResponse = await window.axios.get(
          `tickets/tickets/${ticketId}/invoice`,
          {
            responseType: "blob",
          }
        );
        const blob = new Blob([pdfResponse.data], { type: "application/pdf" });
        const objectUrl = URL.createObjectURL(blob);
        window.open(objectUrl, "_blank");
      } catch (error) {
        console.error("Error generating ticket PDF:", error);
      }
    // } else {
    //   // Handle other payment modes or show error message
    //   console.error("Invalid mode of payment");
    // }
  }
  async function generateTicketPDFPrint(ticketId) {
    // if (form.mode_of_payment === 'QR') {
      try {
        const pdfResponse = await window.axios.get(
          `/tickets/${ticketId}/pdf`,
          {
            responseType: "blob",
          }
        );
        const blob = new Blob([pdfResponse.data], { type: "application/pdf" });
        const objectUrl = URL.createObjectURL(blob);
        window.open(objectUrl, "_blank");
      } catch (error) {
        console.error("Error generating ticket PDF:", error);
      }
    // } else {
    //   // Handle other payment modes or show error message
    //   console.error("Invalid mode of payment");
    // }
  }
  function validateInput(event) {
    const inputChar = event.key;
    const regex = /^[a-zA-Z]+$/;
    if (!regex.test(inputChar)) {
      event.preventDefault();
    }
  }
  async function sendEmailOnline(ticketNo) {
    console.log('sendEmailOnline function called');

    if (form.mode_of_payment === 'online') {
        try {
          const first_min_partial_amount = Math.min(form.grand_total * 0.1, 10000);
            const payload = {
                grand_total: form.grand_total * 100,
                token_no: ticketNo,
                currency: "INR",
                accept_partial: true,
                first_min_partial_amount,
                expire_by: "169109708383838357",                reference_id: "TSsd1989",
                description: "Payment for policy no #23456",
                email: form.email_id,
                customer: {
                    name: form.name,
                    contact: form.contact_no,
                    email: form.email_id
                },
                notify: {
                    sms: true,
                    email: true
                },
                reminder_enable: true,
                notes: {
                    policy_name: "Forest Department"
                },
                callback_url: "https://example-callback-url.com/",
                callback_method: "get"
            };
            const response = await window.axios.post("tickets/sendEmail", payload);
            console.log(response.data);
            // await storeTicket();
        } catch (error) {
            console.error(error);
        }
    }
}
  async function checkPaymentStatus(ticketNo) {
  try {
      const response = await window.axios.post("tickets/payment/status", {
        token_no: ticketNo
      });
      return response.data;
  } catch (error) {
      console.error("Error checking payment status:", error);
      return { status: "error", message: "Failed to check payment status" };
  }
}

function openTicketDetailsWindow(ticketNo, paymentStatusResponse) {
  const ticketDetailsWindow = window.open("", "_blank");
  const noOfVisitors = form.no_of_visitor.filter(val => val !== '').join(', ');

  const ticketDetailsHTML = `
      <html>
          <head>
              <title>Ticket Details</title>
              <style>
                  table {
                      border-collapse: collapse;
                      width: 100%;
                  }
                  th, td {
                      border: 1px solid black;
                      padding: 8px;
                      text-align: left;
                  }
                  th {
                      background-color: #f2f2f2;
                  }
              </style>
          </head>
          <body>
              <h1>Ticket Details</h1>
              <p>Ticket No: ${ticketNo}</p>
              <p>Payment Status: ${paymentStatusResponse.payment_status}</p>
              <h2>User Details</h2>
              <table>
                  <tr>
                      <th>Name</th>
                      <td>${form.name}</td>
                  </tr>
                  <tr>
                      <th>Email</th>
                      <td>${form.email_id}</td>
                  </tr>
                  <tr>
                      <th>Contact No</th>
                      <td>${form.contact_no}</td>
                  </tr>
              </table>
              <h2>Other Ticket Details</h2>
              <table>
                  <tr>
                      <th>Title</th>
                      <td>${form.title}</td>
                  </tr>
                  <tr>
                      <th>Location</th>
                      <td>${form.location}</td>
                  </tr>
                  <tr>
                      <th>Description</th>
                      <td>${form.description}</td>
                  </tr>
                  <tr>
                      <th>Comments</th>
                      <td>${form.comments}</td>
                  </tr>
                  <tr>
                      <th>Reporter Contact</th>
                      <td>${form.reporter_contact}</td>
                  </tr>
                  <tr>
                      <th>Total Visitors</th>
                      <td>${noOfVisitors}</td>
                  </tr>
                  <tr>
                      <th>Total Rate</th>
                      <td>${form.grand_total}</td>
                  </tr>
              </table>
          </body>
      </html>
  `;

  ticketDetailsWindow.document.write(ticketDetailsHTML);
}

  const mode_of_payment = ["QR", "online"];

  return { errorMessage,showError,generateTicketPDFPrint,
    showErrorModal,loadingPayment,checkPaymentStatus,openTicketDetailsWindow,sendEmailOnline,form,mode_of_payment,generateTicketPDF,errors,validateInput,loading,title,email_id,getUsers,user,
    no_of_visitor,total_rate,getTicket,getPlace,place,ticket,no_of_children,getTicketMaster,getHours,ticket_master_id,
    resetForm,category,getCategorys,storeTicket,data,getOffers,offers,};
});
